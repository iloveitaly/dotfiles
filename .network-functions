###########################
# Proxy Helpers
###########################

# all webshare proxies are socks5
# https://help.webshare.io/en/articles/8370540-are-your-proxies-socks-or-http


get-socks-proxy() {
  set -e
  local webshare_token;

  webshare_token=$(op read "op://Assistant/WEBSHARE Scraping Proxy Login/API doc key")

  local proxy_auth=$(
    http "https://proxy.webshare.io/api/v2/proxy/list/?mode=direct" "Authorization: Token $webshare_token" | \
      jq -r '.results | map(select(.country_code == "US")) | .[0] | "socks5://\(.username):\(.password)@\(.proxy_address):\(.port)"'
  )

  for id in $(curl -s -H "Authorization: Token $webshare_token" \
    "https://proxy.webshare.io/api/v2/proxy/ipauthorization/" | \
    jq -r '.results[].id'); do
    curl -s -X DELETE -H "Authorization: Token $webshare_token" \
      "https://proxy.webshare.io/api/v2/proxy/ipauthorization/$id/" 1>/dev/null
    echo "Deleted IP authorization ID: $id" >&2
  done

  # authorize the ip to avoid having to pass the correct username and password, which canary does not support
  local my_ip
  my_ip=$(curl -s https://ifconfig.me/ip | tr -d '\n')
  http POST https://proxy.webshare.io/api/v2/proxy/ipauthorization/ \
    ip_address="$my_ip" \
    Authorization:"$webshare_token" \
    Content-Type:application/json

  echo $proxy_auth
}

# run a local unauthenticated socks proxy which reverse connects to the webshare proxy
run_local_unauthenticated_proxy() {
  local token api_response proxy_url username password proxy_address port
  local pid_file="/tmp/pproxy.pid"

  # Check if proxy is already running and kill it
  if [[ -f "$pid_file" ]]; then
    local old_pid=$(cat "$pid_file")
    if kill -0 "$old_pid" 2>/dev/null; then
      echo "Killing existing proxy process (PID: $old_pid)" >&2
      kill "$old_pid"
      sleep 1
    fi
    rm -f "$pid_file"
  fi

  token=$(op read "op://Assistant/WEBSHARE Scraping Proxy Login/API doc key")

  # Fetch the first US proxy details
  read -r proxy_address port username password < <(
    http --ignore-stdin "https://proxy.webshare.io/api/v2/proxy/list/?mode=direct" "Authorization: Token $token" |
      jq -r '.results | map(select(.country_code == "US")) | .[0] | "\(.proxy_address) \(.port) \(.username) \(.password)"'
  )

  if [[ -z "$proxy_address" || -z "$port" || -z "$username" || -z "$password" ]]; then
    echo "Error: Could not retrieve US proxy details." >&2
    return 1
  fi

  # Start the proxy in the background
  echo "Starting local SOCKS5 proxy on :1080 -> $proxy_address:$port" >&2
  uv tool run pproxy -l socks5://:1080 -r "socks5://$proxy_address:$port#$username:$password" >/dev/null 2>&1 &
  
  # Store the PID
  local pid=$!
  echo "$pid" > "$pid_file"
  
  echo "Proxy started with PID: $pid" >&2
  echo "Local proxy available at: socks5://127.0.0.1:1080" >&2
}

# stop the local socks proxy
stop_proxy_socks() {
  local pid_file="/tmp/pproxy.pid"
  
  if [[ -f "$pid_file" ]]; then
    local pid=$(cat "$pid_file")
    if kill -0 "$pid" 2>/dev/null; then
      echo "Stopping proxy process (PID: $pid)" >&2
      kill "$pid"
      rm -f "$pid_file"
      echo "Proxy stopped" >&2
    else
      echo "Proxy process not running" >&2
      rm -f "$pid_file"
    fi
  else
    echo "No proxy PID file found" >&2
  fi
}

proxy-chrome-canary() {
  local proxy_auth
  proxy_auth=$(get-socks-proxy)
  # Extract protocol, IP, and port (remove username and password)
  local proxy_url
  proxy_url=$(echo "$proxy_auth" | sed -E 's#(socks5)://[^@]+@([^:]+):([0-9]+)#\1://\2:\3#')
  open -a "Google Chrome Canary" --args --proxy-server="$proxy_url"
}

# set ethernet to use the socks proxy
set-socks-proxy() {
  # from webshare
      # jq -r '.results | map(select(.country_code == "US")) | .[0] | "\(.proxy_address) \(.port) On \(.username) \(.password)"'
  # expected format: networksetup -setsocksfirewallproxy <networkservice> <domain> <port number> <authenticated> <username> <password>

  # eval "networksetup -setsocksfirewallproxy "Wi-Fi" $proxy_auth"

  networksetup -setsocksfirewallproxystate "Ethernet" On
  eval "networksetup -setsocksfirewallproxy "Ethernet" $(get-socks-proxy)"
}

clear-socks-proxy() {
  networksetup -setsocksfirewallproxy "Wi-Fi" Empty
  networksetup -setsocksfirewallproxystate "Wi-Fi" Off

  networksetup -setsocksfirewallproxy "Ethernet" Empty
  networksetup -setsocksfirewallproxystate "Ethernet" Off
}

###########################
# Randomize Mac Address
###########################

# Add to ~/.zshrc
randomize_mac() {
  interface=${1:-en0}
  # Get current MAC
  current_mac=$(ifconfig "$interface" | grep ether | awk '{print $2}')
  # Check if backup exists
  if [ -f ~/.mac_address_backup ]; then
    stored_mac=$(cat ~/.mac_address_backup)
    if [ "$current_mac" != "$stored_mac" ]; then
      echo "MAC already randomized. Generating new random MAC."
    fi
  else
    # Store original MAC if no backup exists
    echo "$current_mac" > ~/.mac_address_backup
  fi
  # Generate random MAC (ensure valid unicast)
  new_mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//; s/^./2/')
  # Set new MAC
  sudo ifconfig "$interface" lladdr "$new_mac"
  echo "Original MAC saved. New MAC: $new_mac"
}

restore_mac() {
  interface=${1:-en0}
  # Check if backup file exists
  if [ -f ~/.mac_address_backup ]; then
    original_mac=$(cat ~/.mac_address_backup)
    sudo ifconfig "$interface" lladdr "$original_mac"
    echo "Restored MAC: $original_mac"
    # Remove backup file
    rm ~/.mac_address_backup
  else
    echo "No MAC backup found. Reboot to reset to hardware default."
  fi
}